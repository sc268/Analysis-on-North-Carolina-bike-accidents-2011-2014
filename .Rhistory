zmaxsq_seq <-append(zmaxsq_seq, max(z**2))
res = lapply(tausq_seq, Ln)
tauhat_seq <- append(tauhat_seq, tausq_seq[which.max(res)])
count= count + 1
if (count %%50 ==0){print (count)}
}
plot(zmaxsq_seq, tauhat_seq)
2*log(n)
2*log(n)+log(log(n))
n = 1e4; c = 2*log(n);
extreme <- function(c){
iter = 100;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
}
res1 = extreme(c)
n = 1e4; c = 2*log(n);
extreme <- function(c){
iter = 100; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
}
res1 = extreme(c)
res1
extreme <- function(c){
iter = 100; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
}
res1 = extreme(c)
n = 1e4; c = 2*log(n);
extreme <- function(c){
iter = 100; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
print (z1sq)
res <-append(res, z1sq);
i = i+1;
}
}
}
res1 = extreme(c)
extreme <- function(c){
iter = 100; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
res1
hist(res1)
hist(res1, breaks = 100)
hist(res1, breaks = 25)
hist(res1-c, breaks = 25)
mean(res-c)
mean(res1-c)
n = 1e4; c = 2*log(n)+log(log(n));
extreme <- function(c){
iter = 100; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
n = 1e4; c = 2*log(n)+1.5*log(log(n));
extreme <- function(c){
iter = 100; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
n = 1e4; c = 2*log(n)+1.5*log(log(n));
extreme <- function(c){
iter = 300; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
n = 1e4; c = 2*log(n)+1.5*log(log(n));
extreme <- function(c){
iter = 150; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
n = 1e4; c = 2*log(n)+1.5*log(log(n));
extreme <- function(c){
iter = 150; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
n = 1e4; c = 2*log(n)+2*log(log(n));
extreme <- function(c){
iter = 150; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
(1-exp(-exp(-c)))
exp(-c) / (1-exp(-exp(-c)))
exp(-c) / (1-exp(-exp(-c)))
exp(-c)
n = 1e5; c = 2*log(n)+2*log(log(n));
extreme <- function(c){
iter = 150; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
n = 1e5; c = log(n);
extreme <- function(c){
iter = 150; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
n = 1e5; c = log(n);
extreme <- function(c){
iter = 150; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
n = 1e5; c = 2*log(n);
extreme <- function(c){
iter = 150; i = 0;
res = numeric()
while (i < iter){
z = rnorm(n);
z1sq = max(z**2)
if (z1sq > c){
res <-append(res, z1sq);
i = i+1;
}
}
return (res)
}
res1 = extreme(c)
mean(res1-c)
install.packages(VGAM)
install.packages("VGAM")
expint(0.04)
library(VGAM)
expint(0.05)
expint.E1(0.04)
-c +0.5772156649  + expint.E1(exp(-c))
(-c + 0.5772156649 + expint.E1(exp(-c)))/ (1-exp(exp(-c)))
(-c + 0.5772156649 + expint(-exp(-c)))/ (1-exp(exp(-c)))
expint(-exp(-c)))
expint(-exp(-c))
(-c + 0.5772156649 + expint.E1(exp(-c)))/ (1-exp(exp(-c)))
expint.E1(exp(-c)))
expint.E1(exp(-c))
-c
(-c + 0.5772156649 + expint.E1(exp(-c)))/ (1-exp(-exp(-c)))
(-c + 0.5772156649 + expint.E1(exp(-c)))/ (1-exp(-exp(-c)))
(-c + 0.5772156649 + expint.E1(exp(-c)))/ (1-exp(-exp(-c)))
mean(res1-c)
#scatter plot of z_1^2 vs hat{tau^2} for fixed n, max(L1)
n = 1e5
rho = 0
tausq_seq = seq(10, 40, by = 0.1)
tauhat_seq = numeric()
z1sq_seq = numeric()
Ln1_seq = numeric()
count = 0;
threshold = 2*log(n)+log(log(n))
while (count < 50){
z = rnorm(n)
#z[which.max(z**2)] = sqrt(2*log(n))
while( max(z**2) < threshold){z =rnorm(n)}
res = lapply(tausq_seq, Ln1)
z1sq = max(z**2)
tauhat = tausq_seq[which.max(res)]
if (z1sq > 2*log(n)+log(tauhat)+log(n)/z1sq){
z1sq_seq <-append(z1sq_seq, z1sq)
tauhat_seq <- append(tauhat_seq, tauhat)
Ln1_seq <-append(Ln1_seq, res[which.max(res)])
}
count= count + 1
if (count %%50 ==0){print (count)}
}
plot(z1sq_seq, Ln1_seq)
2*log(n)
2*log(n)+log(log(n))
#scatter plot of z_1^2 vs hat{tau^2} for fixed n, max(L1)
n = 1e5
rho = 0
tausq_seq = seq(10, 40, by = 0.1)
tauhat_seq = numeric()
z1sq_seq = numeric()
Ln1_seq = numeric()
count = 0;
threshold = 2*log(n)+log(log(n))
while (count < 50){
z = rnorm(n)
#z[which.max(z**2)] = sqrt(2*log(n))
while( max(z**2) < threshold){z =rnorm(n)}
res = lapply(tausq_seq, Ln1)
z1sq = max(z**2)
tauhat = tausq_seq[which.max(res)]
if (z1sq > 2*log(n)+log(tauhat)+log(n)/z1sq){
z1sq_seq <-append(z1sq_seq, z1sq)
tauhat_seq <- append(tauhat_seq, tauhat)
Ln1_seq <-append(Ln1_seq, res[which.max(res)])
}
count= count + 1
if (count %%50 ==0){print (count)}
}
plot(z1sq_seq, Ln1_seq)
2*log(n)
2*log(n)+log(log(n))
res = lapply(tausq_seq, Ln1)
n = 1e5
rho = 0
tausq_seq = seq(10, 40, by = 0.1)
tauhat_seq = numeric()
z1sq_seq = numeric()
Ln1_seq = numeric()
count = 0;
threshold = 2*log(n)+log(log(n))
while (count < 50){
z = rnorm(n)
#z[which.max(z**2)] = sqrt(2*log(n))
while( max(z**2) < threshold){z =rnorm(n)}
res = lapply(tausq_seq, Ln)
z1sq = max(z**2)
tauhat = tausq_seq[which.max(res)]
if (z1sq > 2*log(n)+log(tauhat)+log(n)/z1sq){
z1sq_seq <-append(z1sq_seq, z1sq)
tauhat_seq <- append(tauhat_seq, tauhat)
Ln1_seq <-append(Ln1_seq, res[which.max(res)])
}
count= count + 1
if (count %%50 ==0){print (count)}
}
plot(z1sq_seq, Ln1_seq)
#scatter plot of z_1^2 vs hat{tau^2} for fixed n, max(L1)
n = 1e5
rho = 0
tausq_seq = seq(10, 40, by = 0.1)
tauhat_seq = numeric()
z1sq_seq = numeric()
Ln1_seq = numeric()
count = 0;
threshold = 2*log(n)+log(log(n))
while (count < 50){
z = rnorm(n)
#z[which.max(z**2)] = sqrt(2*log(n))
while( max(z**2) < threshold){z =rnorm(n)}
z1sq = max(z**2)
res = lapply(tausq_seq, Ln1)
tauhat = tausq_seq[which.max(res)]
if (z1sq > 2*log(n)+log(tauhat)+log(n)/z1sq){
z1sq_seq <-append(z1sq_seq, z1sq)
tauhat_seq <- append(tauhat_seq, tauhat)
Ln1_seq <-append(Ln1_seq, res[which.max(res)])
}
count= count + 1
if (count %%50 ==0){print (count)}
}
plot(z1sq_seq, Ln1_seq)
pbeta(1)
pbeta(1, 1, 1)
pbeta(0.99, 1, 1)
pbeta(0.95, 1, 1)
pbeta(0.95, 0.5, 0.5)
1/1000
2^3
marginal_likeli_M_one <- function(x1, n1, x2, n2, a, b, m){
p_seq = seq(0, 1, by = 1/m);
res  = 0;
for(p2 in p_seq){
res = res + pbeta(p2, a+x1, b+n1-x1)*p2^(a+x2)*(1-p2)^(b+n2-x2)/beta(a,b)/m;
}
return (res)
}
x1 = 241; n1 = 3598;
x2 = 127; n2 = 1805;
marginal_likeli_M_one(x1,n1,x2,n2,1,1,1000)
M_one <- function(x1, n1, x2, n2, a, b, m){
p_seq = seq(0, 1, by = 1/m);
res  = 0;
for(p2 in p_seq){
res = res + pbeta(p2, a+x1, b+n1-x1)*p2^(a+x2)*(1-p2)^(b+n2-x2)/beta(a,b)/m;
}
return (res)
}
choose(10, 2)
choose(n1,x1)
choose(n2,x2)
M_zero <- function(x1,n1,x2,n2,a,b){
return (beta(a+x1+x2, b+n1-x1+n2-x2)/beta(a,b))
}
M_zero(x1,n1,x2,n2)
M_zero(x1,n1,x2,n2,1,1)
beta(a+x1+x2, b+n1-x1+n2-x2)
beta(a+x1+x2, b+n1-x1+n2-x2)
a = 1
b=2
beta(a+x1+x2, b+n1-x1+n2-x2)
M_zero <- function(x1,n1,x2,n2,a,b){
return (beta(a+x1+x2, b+n1-x1+n2-x2)/beta(a,b)*choose(n1,x1)*choose(n2,x2))
}
M_zero(x1,n1,x2,n2,1,1)
M_one <- function(x1, n1, x2, n2, a, b, m){
p_seq = seq(0, 1, by = 1/m);
res  = 0;
for(p2 in p_seq){
res = res + pbeta(p2, a+x1, b+n1-x1)*p2^(a+x2)*(1-p2)^(b+n2-x2)/beta(a,b)/m;
}
return (res)
}
M_one(x1,n1,x2,n2,1,1,1000)
M_one(x1,n1,x2,n2,1,1,10000)
M_one(x1,n1,x2,n2,1,1,100)
M_one(x1,n1,x2,n2,1,1,1000)
M_one(x2,n2,x1,n1,1,1,1000)
M_one(x2,n2,x1,n1,1,1,1000)
M_one(x2,n2,x1,n1,1,1,1000)
M_one(x2,n2,x1,n1,1,1,1000)
M_one(x2,n2,x1,n1,1,1,100)
M_one <- function(x1, n1, x2, n2, a, b, m){
p_seq = seq(0, 1, by = 1/m);
res  = 0;
for(p2 in p_seq){
res = res + (1-pbeta(p2, a+x1, b+n1-x1))*p2^(a+x2)*(1-p2)^(b+n2-x2)/beta(a,b)/m;
}
return (res)
}
M_one(x1,n1,x2,n2,1,1,1000)
M_one <- function(x1, n1, x2, n2, a, b, m){
p_seq = seq(0, 1, by = 1/m);
res  = 0;
for(p2 in p_seq){
res = res + (1-pbeta(p2, a+x1, b+n1-x1))*p2^(a+x2)*(1-p2)^(b+n2-x2)/beta(a,b)/m;
}
return (res)
}
M_one(x1,n1,x2,n2,1,1,1000)
M_one <- function(x1, n1, x2, n2, a, b, m){
p_seq = seq(0, 1, by = 1/m);
res  = 0;
for(p2 in p_seq){
res = res + pbeta(p2, a+x1, b+n1-x1)*p2^(a+x2)*(1-p2)^(b+n2-x2)/beta(a,b)/m;
}
return (res)
}
M_one(x1,n1,x2,n2,1,1,1000)
library(ggplot2)
library(shiny)
library(leaflet)
library(magrittr)
setwd("~/Dropbox/codes/2015_insight")
getwd()
dat <- read.csv("~/Dropbox/codes/2015_insight/north_carolina_bicycle_crash_data_heatmap_.csv", sep=";")
head(dat)
attach(dat)
colnames(dat)
levels(dat$Speed_Limi) <- c(45,25,35,45,15,55,75)
dat$Speed_Limi <- as.numeric(levels(dat$Speed_Limi))[dat$Speed_Limi]
levels(dat$Drvr_EstSp) <-c(47.5, 100, 5,15,20,25,30,35,40,45,50,55,60,10,65,70,85)
dat$Drvr_EstSp <- as.numeric(levels(dat$Drvr_EstSp))[dat$Drvr_EstSp]
dat_length = dim(dat)[1]
locx <- vector(mode="numeric", length=dat_length)
locy <- vector(mode="numeric", length=dat_length)
for( i in 1:dat_length){
tmp = as.character(dat$Location[i])
tmp = strsplit(tmp, ",")[[1]]
locy[i] = as.numeric(tmp[1])
locx[i] = as.numeric(tmp[2])
}
dat$locx = locx
dat$locy = locy
dat <- dat[, !(colnames(dat) %in% c("Location"))]
#sampling data
dat_sub <- subset(dat, locx != 0.0 & locy!=0.0 &
City %in% c('Durham', 'Raleigh', 'Chapel Hill'))
dim(dat_sub)
accidentMap <- leaflet() %>%
addTiles() %>%
setView( -78.8785,  36.002743, zoom = 13) %>%
addMarkers(data = dat_sub, lng = ~ locx, lat = ~ locy, popup = dat_sub$Bike_Injur)
accidentMap
####
library(plyr)
colnames(dat)
subcols <- c("Bike_Sex", "Bike_Injur", "Weather", "Bike_Pos", "Speed_Limi")
#subcols <- c("Weather")
#head(count(dat, subcols))
dat_aggre <- count(dat, subcols)
head(dat_aggre)
mean(dat_aggre$freq); sd(dat_aggre$freq) #10.9 and 37
res <- glm(freq ~ Bike_Sex + Bike_Injur + Weather + Bike_Pos+Speed_Limi, family="quasipoisson", data = dat_aggre)
summary(res)
dat_sub <- dat[!complete.cases(dat),]
library(party)
res2 <- ctree(Bike_Injur ~ Light_Cond + Weather + Bike_Pos  +  Bike_Alc_D + Speed_Limi,
data = dat_sub)
plot(res2)
levels(Bike_Injur)
